# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:

- script: |
    sleep 2m
  displayName: '2 minutes'
  timeoutInMinutes: 1
  continueOnError: true
  # retryCountOnTaskFailure: 3

- script: echo Hello, world!
  displayName: 'Run a one-line script'

- task: Bash@3
  displayName: Test on the Android Emulator
  inputs:
    targetType: inline
    script: |
      #!/usr/bin/env bash

      # Definir la marca de tiempo de inicio
      start_time=$(date +%s)

      echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install 'system-images;android-28;google_apis_playstore;x86'
      $ANDROID_HOME/platform-tools/adb devices
      echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test_android_emulator -k 'system-images;android-28;google_apis_playstore;x86' --force
      nohup $ANDROID_HOME/emulator/emulator -avd test_android_emulator -no-snapshot > /dev/null 2>&1 &
      
      # Bucle para comprobar si han pasado 20 minutos
      while true; do
        current_time=$(date +%s)
        elapsed_time=$((current_time - start_time))
        
        # Si han pasado más de 20 minutos, finaliza el script
        if [ $elapsed_time -ge 1200 ]; then
          echo "La tarea se ha detenido después de 20 minutos."
          exit 1
        fi
        
        # Comprueba si el emulador ha iniciado correctamente
        if $ANDROID_HOME/platform-tools/adb shell getprop sys.boot_completed | tr -d '\r' | grep -q 1; then
          echo "Emulator started"
          break
        fi
        
        # Espera un segundo antes de volver a verificar
        sleep 1
      done
  retryCountOnTaskFailure: 3

- script: echo Hello, world!
  displayName: 'Run a one-line script'