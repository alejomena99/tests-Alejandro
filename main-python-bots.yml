# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

stages:
- stage: stage
  displayName: stage
  jobs:
  - job: 'job'
    pool:
      vmImage: windows-2019

    steps:
    - powershell: |
          $RutaOriginal = $env:System_DefaultWorkingDirectory
          $RutaActualizada = $RutaOriginal -replace '\\', '\\\\'
          [Environment]::SetEnvironmentVariable("PythonWorkingDirectory", $RutaActualizada, [System.EnvironmentVariableTarget]::User)
          Write-Host "PythonWorkingDirectory=$RutaActualizada"
          Write-Host "##vso[task.setvariable variable=PythonWorkingDirectory;isOutput=true]$RutaActualizada"
      name: setVar

    - powershell: |
        Write-Host $(setVar.PythonWorkingDirectory)

    - task: PythonScript@0
      displayName: Vars Test
      inputs:
        scriptSource: 'inline'
        script: |
          print(f"$(setVar.PythonWorkingDirectory)")
          path = f"$(setVar.PythonWorkingDirectory)"
          print(path)
          file = path + "\\\\test.txt"
          print(file)

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'

    - script: |
        pip install Lackey
        pip install pyautogui
      displayName: Pip install modules

    - task: PythonScript@0
      displayName: Screenshot notepad
      inputs:
        scriptSource: 'inline'
        script: |
          import pyautogui
          from lackey import *
          import subprocess
          import time

          path = f"$(setVar.PythonWorkingDirectory)"

          print("Openning Calculator")

          try:
              subprocess.Popen(["calc.exe"])
              print("Calculadora abierta exitosamente.")
          except Exception as e:
              print("Se produjo un error al abrir la calculadora:", e)

          zeroButton = pyautogui.locateOnScreen(path+"\\\\zero.png", confidence=0.6)
          print(zeroButton)
          zeroButtonX, zeroButtonY = pyautogui.center(zeroButton)
          print("zeroButtonX:", zeroButtonX, "| zeroButtonY:", zeroButtonY)
          pyautogui.click(zeroButtonX, zeroButtonY)

          addButton = pyautogui.locateOnScreen(path+"\\\\add.png", confidence=0.6)
          print(addButton)
          addButtonX, addButtonY = pyautogui.center(addButton)
          print("addButtonX:", addButtonX, "| addButtonY:", addButtonY)
          pyautogui.click(addButtonX, addButtonY)

          oneButton = pyautogui.locateOnScreen(path+"\\\\one.png", confidence=0.6)
          print(oneButton)
          oneButtonX, oneButtonY = pyautogui.center(oneButton)
          print("oneButtonX:", oneButtonX, "| oneButtonY:", oneButtonY)
          pyautogui.click(oneButtonX, oneButtonY)

          # type("test.txt")
          # type(Key.ENTER)

          print("Waiting 5 seconds")
          time.sleep(5)

          print("Taking screenshot")
          screenshot = pyautogui.screenshot()
          screenshot.save("captura.png")

    - task: PythonScript@0
      displayName: Folders
      inputs:
        scriptSource: 'inline'
        script: |
          import os

          path = f"$(setVar.PythonWorkingDirectory)"
          archivos = os.listdir(path)

          for archivo in archivos:
              print(archivo)
          
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/captura.png'
        ArtifactName: 'drop_$(Build.Repository.Name)'
        publishLocation: 'Container'
    