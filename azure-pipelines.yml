trigger: none

parameters:
- name: releaseName 
  displayName: releaseName 
  type: string
  default: default


stages: 
- stage: stage
  displayName: stage
  jobs:
    - job: 'job'
      pool:
        vmImage: 'ubuntu-20.04'

      steps:

      - checkout: self
        fetchDepth: 0

      - task: HelmInstaller@0
        inputs:
          helmVersion: '2.14.1'
          installKubectl: true

      - task: replacetokens@5
        inputs:
          targetFiles: '**/*.config'
          encoding: 'auto'
          tokenPattern: 'default'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true

      - script: |
          pip3 install ruamel.yaml
        displayName: Pip install python modules

      - task: PythonScript@0
        displayName: 'Read and create new password'
        inputs:
          scriptSource: 'inline'
          script: |
            import ruamel.yaml
            import random
            import string
            
            
            yaml = ruamel.yaml.YAML()
            yaml.preserve_quotes = True
            with open('envoy.yaml', 'r') as file:
                data = yaml.load(file)
            
            routes = data['static_resources']['listeners'][0]['filter_chains'][0]['filters'][0]['typed_config']['route_config']['virtual_hosts'][0]['routes']
            
            prefixes = set()
            
            for route in routes:
                match = route['match']
                prefix = match['prefix']
                prefixes.add(prefix)
            
            longitud = random.randint(10, 20)
            
            
            password = ''.join(random.choices(string.ascii_uppercase + string.digits, k=longitud))
            
            while any(password in prefix for prefix in prefixes):
                password = ''.join(random.choices(string.ascii_uppercase + string.digits, k=longitud))
            
            print('##vso[task.setvariable variable=password;]%s' % (password))

      - task: PythonScript@0
        inputs:
          scriptSource: 'inline'
          script: |
            import ruamel.yaml
            from ruamel.yaml.scalarstring import DoubleQuotedScalarString
            
            yaml = ruamel.yaml.YAML()
            yaml.preserve_quotes = True 
            with open('envoy.yaml', 'r') as file:
                data = yaml.load(file)
            
            new_routes_match = {
                'match': {
                    'prefix': DoubleQuotedScalarString('//')
                },
                'route': {
                    'timeout': DoubleQuotedScalarString('//'),
                    'prefix_rewrite': DoubleQuotedScalarString('//'),
                    'cluster': '//'
                }
            }
            
            new_rules_match = {
                'match': {
                    'prefix': DoubleQuotedScalarString('///$(password)/')
                },
                'requires': {
                    'provider_name': '//',
                }
            }
            
            new_cluster = {
                'name': '//',
                'connect_timeout': '//',
                'type': '//',
                'load_assignment': {
                    'cluster_name': '//',
                    'endpoints': [{
                        'lb_endpoints': [{
                            'endpoint': {
                                'address': {
                                    'socket_address': {
                                        'address': '//',
                                        'port_value': '//'
                                    }
                                }
                            }
                        }]
                    }]
                }
            }
            
            
            routes = data['static_resources']['listeners'][0]['filter_chains'][0]['filters'][0]['typed_config']['route_config']['virtual_hosts'][0]['routes']
            routes.append(new_routes_match)
            
            rules = data['static_resources']['listeners'][0]['filter_chains'][0]['filters'][0]['typed_config']['http_filters'][0]['typed_config']['rules']
            rules.append(new_rules_match)
            
            cluster = data['static_resources']['clusters']
            cluster.append(new_cluster)

            with open('new-envoy.yaml', 'w') as file:
                yaml.dump(data, file)

      - script: |
          helm lint $(System.DefaultWorkingDirectory)/charts --values $(System.DefaultWorkingDirectory)/charts/values.yaml --set deploy.imageTag=$(Build.BuildNumber),deploy.build=$(Build.BuildId)
          helm template $(System.DefaultWorkingDirectory)/charts --values $(System.DefaultWorkingDirectory)/charts/values.yaml --set deploy.imageTag=$(Build.BuildNumber),deploy.build=$(Build.BuildId)
        displayName: 'Check Helm Files'

      - task: PythonScript@0
        displayName: 'Check Release Name Characters'
        inputs:
          scriptSource: 'inline'
          script: |
            import sys
            cadena = "redis-${{ parameters.releaseName }}"
            error = False
            for caracter in cadena:
              if  (ord(caracter) < 97 or 122 < ord(caracter)) and ord(caracter) != 45 :
                error = True
            if error == True :
              print("Error, release name called redis-${{ parameters.releaseName }} is not allowed, only lowercase and hyphens can be used to name it.")
              raise SystemExit(1)
            else:
              print("Successful, release name called redis-${{ parameters.releaseName }} is allowed")
              
      - script: |
            git config --global user.email "$(Build.RequestedForEmail)"
            git config --global user.name "$(Build.Repository.Name)"
            git remote -v
            git checkout -b $(Build.SourceBranchName) origin/$(Build.SourceBranchName)
            git branch -a
            git add envoy.yaml
            git commit -m "Update envoy.yaml in $(Build.Repository.Name) repository with $(Build.DefinitionName) pipeline"
            git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(Build.SourceBranchName)
        displayName: Update repository
