trigger: none

parameters:
  - name: typerelease
    type: string
    default: aks
    values:
    - aks
    - gcp
    - oks
    - android-google
    - android-huawei

stages: 
- stage: stage
  displayName: stage
  jobs:
    - job: 'job'
      pool:
        vmImage: 'ubuntu-20.04'

      steps:

      # - script: echo $(typerelease)
      # - checkout: self
      #   fetchDepth: 0

      # - script: |
      #     pip install pyyaml
      #   displayName: Pip install request python modules
      
      # - script: |
      #     python3 text-manipulation.py
      #   displayName: Run python text manipulation

      # - script: |
      #       git config --global user.email "$(Build.RequestedForEmail)"
      #       git config --global user.name "$(Build.Repository.Name)"
      #       git remote -v
      #       git checkout -b $(Build.SourceBranchName) origin/$(Build.SourceBranchName)
      #       git branch -a
      #       git add envoy.yaml
      #       git commit -m "Update envoy.yaml in $(Build.Repository.Name) repository with $(Build.DefinitionName) pipeline"
      #       git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(Build.SourceBranchName)
      #   displayName: Update repository
      - task: SonarQubePrepare@4
        displayName: Prepare analysis on SonarQube
        continueOnError: false
        inputs:
          SonarQube: 97c0a404-ddb8-4a13-90b7-b16b9444b77d
          scannerMode: Other
          configMode: manual
          cliProjectKey: $(Build.Repository.Name)-$(Build.SourceBranchName)
          projectKey: $(Build.Repository.Name)-$(Build.SourceBranchName)
          cliProjectName: $(Build.Repository.Name)-$(Build.SourceBranchName)
          projectName: $(Build.Repository.Name)-$(Build.SourceBranchName)
          cliProjectVersion: $(Build.BuildNumber)
          projectVersion: $(Build.BuildNumber)
          extraProperties: |
            # Additional properties that will be passed to the scanner,
            # Put one key=value per line, example:
            # sonar.exclusions=**/*.bin
            sonar.branch.name=master
            sonar.projectKey=$(Build.Repository.Name)
            sonar.projectName=$(Build.Repository.Name)
            sonar.projectVersion=$(Build.BuildNumber)
            sonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/testDevelop$(platformletter)msDebugUnitTestCoverage/testDevelop$(platformletter)msDebugUnitTestCoverage.xml
            sonar.junit.reportPaths= build/test-results/testDevelop$(platformletter)msDebugUnitTest
            sonar.exclusions = **/*Test*/**, *.json, **/*test*/**, **/.gradle/**, **/R.class
            sonar.coverage.exclusions = **/com/exito/appcompania/views/**, **/databinding/**/*.*, **/android/databinding/*Binding.*, **/BR.*, **/R.*, **/R$*.*, **/BuildConfig.*, **/Manifest*.*, **/*_MembersInjector.*, **/Dagger*Component.*, **/Dagger*Component$Builder.*, **/*Module_*Factory.*, **/*Fragment*.*, **/*Activity*.*, **/*Adapter*.*, **/*ViewPager*.*, **/*ViewHolder*.*, **/*Module*.*"


      - task: SonarQubePrepare@4
        displayName: 'Prepare analysis on SonarQube'
        inputs:
          SonarQube: 'Sonar Grupo Exito'
          configMode: manual
          scannerMode: Other
          extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.branch.name=master
          sonar.projectKey=$(Build.Repository.Name)
          sonar.projectName=$(Build.Repository.Name)
          sonar.projectVersion=$(Build.BuildNumber)
          sonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/testDevelopDebugUnitTestCoverage/testDevelopDebugUnitTestCoverage.xml
          sonar.junit.reportPaths= build/test-results/testDevelopDebugUnitTest
          sonar.exclusions = **/*Test*/**, *.json, **/*test*/**, **/.gradle/**, **/R.class
          sonar.coverage.exclusions = **/com/exito/appcompania/views/**, **/databinding/**/*.*, **/android/databinding/*Binding.*, **/BR.*, **/R.*, **/R$*.*, **/BuildConfig.*, **/Manifest*.*, **/*_MembersInjector.*, **/Dagger*Component.*, **/Dagger*Component$Builder.*, **/*Module_*Factory.*, **/*Fragment*.*, **/*Activity*.*, **/*Adapter*.*, **/*ViewPager*.*, **/*ViewHolder*.*, **/*Module*.*