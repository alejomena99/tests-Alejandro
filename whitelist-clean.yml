trigger: none

parameters:
- name: resourceType
  displayName: Resource Type
  type: string
  values:
  - 'PC'
  - 'SERVER'

- name: ipDuration
  displayName: Ip Duration (Days)
  type: string
  values:
  - '15'
  - '30'
  - '45'

- name: description
  displayName: New record description
  type: string

- name: ip
  displayName: Record Ip
  type: string
  
stages: 
- ${{ if eq(Build.Reason , 'Manual') }}:

  - stage: stage-a
    displayName: stage-a
    jobs:
      - job: 'job-a'
        pool:
          name: agent-Alejo

        steps:

        - checkout: self
          fetchDepth: 0

        - script: |

            json_file="rabbitmq.json"

            existing_json="rabbitmq.json"

            description="${{parameters.resourceType}}-${{parameters.description}}-Created:$(date '+%Y/%m/%d')-Duration:${{parameters.ipDuration}}"
            ip="${{parameters.ip}}" 

            if echo "$existing_json" | jq -e ".[] | select(.ip == \"$ip/32\")" > /dev/null; then
              echo "La IP "$ip" ya existe en las listas blancas."
              exit 1
            fi

            new_record="{\"description\":\"$description\",\"ip\":\"$ip/32\",\"ports\":[],\"services\":[\"AMQPS\"]}"

            jq --argjson new_rec "$new_record" '. += [$new_rec]' "$json_file" > tmp.json && mv tmp.json "$json_file"

            nuevo_json=$(cat "$json_file")

            echo "La lista blanca ha sida agregada correctamente."

          displayName: 'Run rabbitmq whitelist script'

        - task: PublishBuildArtifacts@1
          displayName: Publish artifacts
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/rabbitmq.json'
            ArtifactName: 'drop_whitelist'
            publishLocation: 'Container'

- ${{ if eq(Build.Reason , 'Schedule') }}:

  - stage: stage-b
    displayName: stage-b
    jobs:
      - job: 'job-b'
        pool:
          name: agent-Alejo

        steps:

        - checkout: self
          fetchDepth: 0