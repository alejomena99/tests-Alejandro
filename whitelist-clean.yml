trigger: none
pr: none

# schedules:
# - cron: "*/5 * * * *"
#   displayName: Build per minute
#   branches:
#     include:
#     - '*'
#   always: true

parameters:
- name: resourceType
  displayName: Resource Type
  default: 'PC'
  type: string
  values:
  - 'PC'
  - 'SERVER'

- name: ipDuration
  displayName: Ip Duration (Days)
  default: '15'
  type: string
  values:
  - '15'
  - '30'
  - '45'

- name: description
  displayName: New record description
  default: ''
  type: string

- name: ip
  displayName: Record Ip
  default: ''
  type: string

name: "Running... "
appendCommitMessageToRunName: false

stages: 
- ${{ if eq(variables['Build.Reason'], 'Manual') }}:

  - stage: stage_a
    displayName: stage_a
    jobs:
      - job: 'job_a'
        pool:
          name: agent-Alejo

        steps:

        - checkout: self
          fetchDepth: 0
        
        - script: |

            json_file="rabbitmq.json"

            existing_json="rabbitmq.json"

            description="${{parameters.resourceType}}-${{parameters.description}}-Created:$(date '+%Y/%m/%d')-Duration:${{parameters.ipDuration}}"
            ip="${{parameters.ip}}" 

            if echo "$existing_json" | jq -e ".[] | select(.ip == \"$ip/32\")" > /dev/null; then
              echo "La IP "$ip" ya existe en las listas blancas."
              exit 1
            fi

            new_record="{\"description\":\"$description\",\"ip\":\"$ip/32\",\"ports\":[],\"services\":[\"AMQPS\"]}"

            jq --argjson new_rec "$new_record" '. += [$new_rec]' "$json_file" > tmp.json && mv tmp.json "$json_file"

            nuevo_json=$(cat "$json_file")

            echo "La lista blanca ha sida agregada correctamente."

          displayName: 'Run rabbitmq whitelist script'

        - task: PublishBuildArtifacts@1
          displayName: Publish artifacts
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/rabbitmq.json'
            ArtifactName: 'drop_whitelist'
            publishLocation: 'Container'
        
        - script: |

            json=$(cat rabbitmq.json)

            # Obtener la fecha actual
            current_date=$(date +"%Y/%m/%d")

            # Función para verificar si una IP ha caducado
            verificar_caducidad() {
              ip=$1
              description=$2

              # Verificar si la descripción comienza con "SERVER"
              if [[ "$description" == SERVER* ]]; then
                echo "La IP $ip es de un servidor y no tiene caducidad."
              else
                # Extraer la fecha de creación y la duración del campo "description"
                creation_date=$(echo $description | awk -F 'Created:' '{print $2}' | awk -F '-Duration:' '{print $1}')
                duration=$(echo $description | awk -F '-Duration:' '{print $2}')

                # Calcular la fecha de caducidad
                expiration_date=$(date -d "$creation_date + $duration days" +"%Y/%m/%d")

                # Comparar las fechas y mostrar el resultado
                if [[ "$current_date" > "$expiration_date" ]]; then
                  echo "La IP $ip ha caducado"
                else
                  echo "La IP $ip sigue vigente hasta el $expiration_date"
                fi
              fi
            }

            # Iterar sobre cada elemento del JSON
            for row in $(echo "$json" | jq -r '.[] | @base64'); do
              _jq() {
                echo ${row} | base64 --decode | jq -r ${1}
              }

              ip=$(_jq '.ip')
              description=$(_jq '.description')

              # Llamar a la función de verificación de caducidad
              verificar_caducidad "$ip" "$description"
            done
          displayName: 'Check deprecated IPs'


- ${{ if eq(variables['Build.Reason'], 'Schedule') }}:

  - stage: stage_b
    displayName: stage_b
    jobs:
      - job: 'job_b'
        pool:
          name: agent-Alejo

        steps:

        - checkout: self
          fetchDepth: 0
