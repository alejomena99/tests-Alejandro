trigger: none

variables:
  - group: alejo-var-infra

  - name: sshPub
    value: $(sshPub.secureFilePath)

  - name: sshPriv
    value: $(sshPriv.secureFilePath)

stages:
- stage: stage
  displayName: stage
  jobs:
  - job: 'create_vm'
    pool:
      vmImage: ubuntu-latest

    steps:

    - task: InstallSSHKey@0
      displayName: 'Install an SSH key'
      inputs:
        knownHostsEntry: 'NA'
        sshKeySecureFile: 'alejo_id_rsa'

    - task: DownloadSecureFile@1
      displayName: 'VM ssh file download'
      name: sshPub
      inputs:
        secureFile: 'alejo-ssh.pub'

    - task: replacetokens@3
      displayName: 'Replace Tokens for bash scripts'
      inputs:
        targetFiles: |
          scripts/*.sh

    - task: Bash@3
      displayName: 'Create storage and container account'
      inputs:
        filePath: 'scripts/az-infra.sh'
    
    - task: replacetokens@3
      displayName: 'Replace Tokens for terraform scripts'
      inputs:
        targetFiles: |
          terraform/*.tf

    - task: TerraformInstaller@1
      displayName: 'Install or Update Terraform'
      inputs:
        terraformVersion: 1.0.7
    
    - script: |
        terraform init
      displayName: 'Terraform init'
      workingDirectory: 'terraform/'

    - script: |
        terraform plan
      displayName: 'Terraform plan'
      workingDirectory: 'terraform/'

    - script: |
        terraform apply -auto-approve
      displayName: 'Terraform apply'
      workingDirectory: 'terraform/'

    # - script: |
    #     az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
    #     az storage account delete --name $(STORAGE_ACCOUNT) --resource-group $(RESOURCE_GROUP) --yes

    - script: |
        az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
        vm_name=$(az vm list --resource-group $(RESOURCE_GROUP) | jq -r '.[].name')
        vmPublicIp=$(az vm show -g $(RESOURCE_GROUP) -n $vm_name -d --query publicIps -o tsv)
        echo "##vso[task.setvariable variable=vmPublicIp;isoutput=true;issecret=true]$vmPublicIp"
        echo "##vso[task.setvariable variable=knownHostsEntry;isoutput=true;issecret=true]$(ssh-keyscan $vmPublicIp | grep ssh-rsa)"
      name: vm_public_key
      displayName: 'Get VM public IP'


  - job: 'connect_vm'
    pool:
      vmImage: ubuntu-latest

    dependsOn: create_vm
    variables:
      knownHostsEntry: $[ dependencies.create_vm.outputs['vm_public_key.knownHostsEntry'] ]  
      vmPublicIp: $[ dependencies.create_vm.outputs['vm_public_key.vmPublicIp'] ] 

    steps:

    - task: InstallSSHKey@0
      displayName: 'Install an SSH key'
      inputs:
        knownHostsEntry: '$(knownHostsEntry)'
        sshKeySecureFile: 'alejo_id_rsa'

    - task: replacetokens@3
      displayName: 'Replace Tokens for ansible scripts'
      inputs:
        targetFiles: |
          ansible/*.ini
    
    - script: ssh -n adminuser@$(vmPublicIp)

