trigger: none

variables:
  - group: alejo-var-infra

  - name: sshPub
    value: $(sshPub.secureFilePath)

  - name: sshPriv
    value: $(sshPriv.secureFilePath)

parameters:

- name: command
  displayName: 'Pipeline Command'
  type: string
  default: apply
  values:
  - apply
  - destroy
  - custom

- name: myStep
  type: step
  default:
    script: |
      az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
      az resource list --resource-group $(RESOURCE_GROUP)

stages:
- stage: stage
  displayName: stage
  jobs:

  - ${{ if eq(parameters.command, 'apply') }}:
    - job: 'create_vm'
      pool:
        vmImage: ubuntu-20.04

      steps:

      - task: DownloadSecureFile@1
        displayName: 'VM ssh file download'
        name: sshPub
        inputs:
          secureFile: 'alejo-ssh.pub'
      
      - task: DownloadSecureFile@1
        displayName: 'VM ssh file download'
        name: sshPriv
        inputs:
          secureFile: 'alejo_id_rsa'

      - script: |
          az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
          stg_account_check=$(az storage account check-name -n $(STORAGE_ACCOUNT) -o json | jq -r '.nameAvailable')

          if [ $stg_account_check == false ]; then
            echo "El storage account $(STORAGE_ACCOUNT) ya existe"
            echo "##vso[task.setvariable variable=ACCESS_KEY;issecret=true]$(az storage account keys list --resource-group $(RESOURCE_GROUP) --account-name $(STORAGE_ACCOUNT) --query "[0].value" -o tsv)"
          else
            echo "El storage account $(STORAGE_ACCOUNT) no existe y sera creado"
            az storage account create -n $(STORAGE_ACCOUNT) -g $(RESOURCE_GROUP) -l westus --sku Standard_LRS
            echo "##vso[task.setvariable variable=ACCESS_KEY;issecret=true]$(az storage account keys list --resource-group $(RESOURCE_GROUP) --account-name $(STORAGE_ACCOUNT) --query "[0].value" -o tsv)"
          fi
        displayName: 'Create storage account'
        continueOnError: true

      - script: |
          az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
          stg_container_check=$(az storage container exists --account-name $(STORAGE_ACCOUNT) --name $(STORAGE_CONTAINER) --account-key $(ACCESS_KEY) | jq '.exists')
          if [ $stg_container_check == false ]; then
            echo "El storage container $(STORAGE_CONTAINER) no existe y sera creado"
            az storage container create -n $(STORAGE_CONTAINER) --account-name $(STORAGE_ACCOUNT) --account-key $(ACCESS_KEY)
          else
            echo "El storage container $(STORAGE_CONTAINER) ya existe"
          fi
        displayName: 'Create storage container'
        continueOnError: true

      - task: replacetokens@3
        displayName: 'Replace Tokens for terraform scripts'
        inputs:
          targetFiles: |
            terraform/*.tf

      - task: TerraformInstaller@1
        displayName: 'Install or Update Terraform'
        inputs:
          terraformVersion: 1.0.7
      
      - script: |
          terraform init
        displayName: 'Terraform init'
        workingDirectory: 'terraform/'

      - script: |
          terraform plan
        displayName: 'Terraform plan'
        workingDirectory: 'terraform/'

      - script: |
          terraform apply -auto-approve
        displayName: 'Terraform apply'
        workingDirectory: 'terraform/'

      - script: |
          echo "##vso[task.setvariable variable=vmPublicIp;issecret=true]$(terraform output -json | jq -r '.virtual_machine_ip.value')"
        displayName: 'Get VM public IP'
        workingDirectory: 'terraform/'

      - task: replacetokens@3
        displayName: 'Replace Tokens for ansible scripts'
        inputs:
          targetFiles: |
            ansible/*.ini

      - script: chmod 600 $(sshPriv)
        displayName: 'Set permission for private key'

      - task: Ansible@0
        displayName: 'VM Ansible Initial provisioning'
        inputs:
          ansibleInterface: 'agentMachine'
          playbookPathOnAgentMachine: 'ansible/initial_config.yaml'
          inventoriesAgentMachine: 'file'
          inventoryFileOnAgentMachine: 'ansible/inventory.ini'

      - script: |
          json_file="$(System.DefaultWorkingDirectory)/vm_info.json"
          distribution=$(jq -r '.distribution' "$json_file")

          if [[ "$distribution" == "Ubuntu" ]]; then
              echo "La distribución es Ubuntu"
              echo "##vso[task.setvariable variable=UbuntuVmPublicIp;issecret=true]$(terraform output -json | jq -r '.virtual_machine_ip.value')"
              cat $(System.DefaultWorkingDirectory)/vm_info.json
          else
              echo "La distribución no es Ubuntu"
              cat $(System.DefaultWorkingDirectory)/vm_info.json
          fi
        displayName: 'VM Distribution'

      - task: replacetokens@3
        displayName: 'Replace Tokens for ansible scripts'
        inputs:
          targetFiles: |
            ansible/*.ini

      - task: Ansible@0
        displayName: 'VM Ansible Ubuntu provisioning'
        condition: ne(variables.UbuntuVmPublicIp, '')
        inputs:
          ansibleInterface: 'agentMachine'
          playbookPathOnAgentMachine: 'ansible/ubuntu_config.yaml'
          inventoriesAgentMachine: 'file'
          inventoryFileOnAgentMachine: 'ansible/inventory.ini'

      - task: Ansible@0
        displayName: 'VM Ansible Red hay provisioning'
        condition: ne(variables.RedHatVmPublicIp, '')
        inputs:
          ansibleInterface: 'agentMachine'
          playbookPathOnAgentMachine: 'ansible/red_hat_config.yaml'
          inventoriesAgentMachine: 'file'
          inventoryFileOnAgentMachine: 'ansible/inventory.ini'

  - ${{ if eq(parameters.command, 'destroy') }}:
    - job: 'delete_vm'
      pool:
        vmImage: ubuntu-20.04

      steps:

      - task: DownloadSecureFile@1
        displayName: 'VM ssh file download'
        name: sshPub
        inputs:
          secureFile: 'alejo-ssh.pub'

      - script: |
          az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
          echo "##vso[task.setvariable variable=ACCESS_KEY;issecret=true]$(az storage account keys list --account-name $(STORAGE_ACCOUNT) -o json | jq -r '.[0].value')"
        displayName: 'Get storage account keys'
        continueOnError: true

      - task: replacetokens@3
        displayName: 'Replace Tokens for terraform scripts'
        inputs:
          targetFiles: |
            terraform/*.tf

      - task: TerraformInstaller@1
        displayName: 'Install or Update Terraform'
        inputs:
          terraformVersion: 1.0.7
      
      - script: |
          terraform init
        displayName: 'Terraform init'
        workingDirectory: 'terraform/'

      - script: |
          terraform plan
        displayName: 'Terraform plan'
        workingDirectory: 'terraform/'

      - script: |
          terraform destroy -auto-approve
        displayName: 'Terraform destroy'
        workingDirectory: 'terraform/'

      - script: |
          az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
          az storage account delete --name $(STORAGE_ACCOUNT) --resource-group $(RESOURCE_GROUP) --yes
        displayName: 'Delete storage account'

  - ${{ if eq(parameters.command, 'custom') }}:
    - job: 'custom_job'
      pool:
        vmImage: ubuntu-20.04

      steps:

      - ${{ parameters.myStep }}