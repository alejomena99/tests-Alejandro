trigger: none

variables:
  - group: alejo-var-infra

  - name: sshPub
    value: $(sshPub.secureFilePath)

  - name: sshPriv
    value: $(sshPriv.secureFilePath)

stages:
- stage: stage
  displayName: stage
  jobs:
  - job: 'create_vm'
    pool:
      vmImage: ubuntu-20.04

    steps:

    # - script: |
    #     az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
    #     az storage account delete --name $(STORAGE_ACCOUNT) --resource-group $(RESOURCE_GROUP) --yes

    # - task: InstallSSHKey@0
    #   displayName: 'Install an SSH key'
    #   inputs:
    #     knownHostsEntry: 'NA'
    #     sshKeySecureFile: 'alejo_id_rsa'

    - task: DownloadSecureFile@1
      displayName: 'VM ssh file download'
      name: sshPub
      inputs:
        secureFile: 'alejo-ssh.pub'
    
    - task: DownloadSecureFile@1
      displayName: 'VM ssh file download'
      name: sshPriv
      inputs:
        secureFile: 'alejo-ssh.pub'

    - script: |
        az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
        stg_account_check=$(az storage account check-name -n $(STORAGE_ACCOUNT) -o json | jq -r '.nameAvailable')

        if [ $stg_account_check == false ]; then
          echo "El storage account $(STORAGE_ACCOUNT) ya existe"
          echo "##vso[task.setvariable variable=ACCESS_KEY;issecret=true]$(az storage account keys list --account-name $(STORAGE_ACCOUNT) -o json | jq -r '.[0].value')
        else
          echo "El storage account $(STORAGE_ACCOUNT) no existe y sera creado"
          az storage account create -n $(STORAGE_ACCOUNT) -g $(RESOURCE_GROUP) -l westus --sku Standard_LRS
          echo "##vso[task.setvariable variable=ACCESS_KEY;issecret=true]$(az storage account keys list --account-name $(STORAGE_ACCOUNT) -o json | jq -r '.[0].value')
        fi
      displayName: 'Create storage account'
      continueOnError: true

    - script: |
        az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
        stg_container_check=$(az storage container exists --account-name $(STORAGE_ACCOUNT) --name $(STORAGE_CONTAINER) --account-key $(ACCESS_KEY) | jq '.exists')
        if [ $stg_container_check == false ]; then
          echo "El storage container $(STORAGE_CONTAINER) no existe y sera creado"
          az storage container create -n $(STORAGE_CONTAINER) --account-name $(STORAGE_ACCOUNT) --account-key $(ACCESS_KEY)
        else
          echo "El storage container $(STORAGE_CONTAINER) ya existe"
        fi
      displayName: 'Create storage container'
      continueOnError: true

    - task: replacetokens@3
      displayName: 'Replace Tokens for terraform scripts'
      inputs:
        targetFiles: |
          terraform/*.tf

    - task: TerraformInstaller@1
      displayName: 'Install or Update Terraform'
      inputs:
        terraformVersion: 1.0.7
    
    - script: |
        terraform init
      displayName: 'Terraform init'
      workingDirectory: 'terraform/'

    - script: |
        terraform plan
      displayName: 'Terraform plan'
      workingDirectory: 'terraform/'

    - script: |
        terraform apply -auto-approve
      displayName: 'Terraform apply'
      workingDirectory: 'terraform/'

    - task: replacetokens@3
      displayName: 'Replace Tokens for ansible scripts'
      inputs:
        targetFiles: |
          ansible/*.ini
    
    - script: chmod 600 $(sshPub)

    - task: Ansible@0
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'ansible/playbook.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'ansible/inventory.ini'

    # - script: |
    #     az login --service-principal -u $(CLIENT_ID) -p $(CLIENT_SECRET) --tenant $(TENANT_ID)
    #     vm_name=$(az vm list --resource-group $(RESOURCE_GROUP) | jq -r '.[].name')
    #     vmPublicIp=$(az vm show -g $(RESOURCE_GROUP) -n $vm_name -d --query publicIps -o tsv)
    #     echo "##vso[task.setvariable variable=vmPublicIp;isoutput=true;issecret=true]$vmPublicIp"
    #     echo "##vso[task.setvariable variable=knownHostsEntry;isoutput=true;issecret=true]$(ssh-keyscan $vmPublicIp | grep ssh-rsa)"
    #   name: vm_public_key
    #   displayName: 'Get VM public IP'


  # - job: 'connect_vm'
  #   pool:
  #     vmImage: ubuntu-20.04

  #   dependsOn: create_vm
  #   variables:
  #     knownHostsEntry: $[ dependencies.create_vm.outputs['vm_public_key.knownHostsEntry'] ]  
  #     vmPublicIp: $[ dependencies.create_vm.outputs['vm_public_key.vmPublicIp'] ] 

  #   steps:

  #   - task: InstallSSHKey@0
  #     displayName: 'Install an SSH key'
  #     inputs:
  #       knownHostsEntry: '$(knownHostsEntry)'
  #       sshKeySecureFile: 'alejo_id_rsa'

  #   - task: replacetokens@3
  #     displayName: 'Replace Tokens for ansible scripts'
  #     inputs:
  #       targetFiles: |
  #         ansible/*.ini
    
  #   - script: ssh -n adminuser@$(vmPublicIp)

  #   - task: Ansible@0
  #     inputs:
  #       ansibleInterface: 'agentMachine'
  #       playbookPathOnAgentMachine: 'ansible/playbook.yaml'
  #       inventoriesAgentMachine: 'file'
  #       inventoryFileOnAgentMachine: 'ansible/inventory.ini'